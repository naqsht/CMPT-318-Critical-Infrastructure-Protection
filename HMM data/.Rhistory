weekdays_hours = hms(as.character(weekdays_time))
weekdays$hours = as.integer(hour(weekdays_hours))
weekends_time = factor(weekends$Time)
weekends_hours = hms(as.character(weekends_time))
weekends$hours = as.integer(hour(weekends_hours))
# Allot numbers to specific weekdays
Monday = weekdays[weekdays$weekdays_num == 1,]
Tuesday = weekdays[weekdays$weekdays_num == 2,]
Wednesday = weekdays[weekdays$weekdays_num == 3,]
Thursday = weekdays[weekdays$weekdays_num == 4,]
Friday = weekdays[weekdays$weekdays_num == 5,]
Saturday = weekends[weekends$weekdays_num == 6,]
Sunday = weekends[weekends$weekdays_num == 7,]
# Categorize hours into away hours and work hours for Wednesdays and Saturdays
# Away hours: 10 am to 1 pm
# Home hours: 7 pm to 10 pm
wednesday_awayhours = Wednesday[(Wednesday$hours >=10) & (Wednesday$hours <=13),]
wednesday_homehours = Wednesday[(Wednesday$hours >=19) & (Wednesday$hours <=22),]
saturday_awayhours = Saturday[(Saturday$hours >=10) & (Saturday$hours <=13),]
saturday_homehours = Saturday[(Saturday$hours >=19) & (Saturday$hours <=22),]
data = saturday_awayhours
get_linearPolyFit <- function(data){
time <- factor(data$Time)
count <- 1
index <- 1
meanActive <- 0
meanReactive <- 0
meanVoltage <- 0
meanIntensity <- 0
meanMeter1 <- 0
meanMeter2 <- 0
meanMeter3 <-0
size <- nlevels(time)
while(count <= size){
currentTime <- levels(time)[count]
d<- subset(data, Time == currentTime)
count<- count+1
meanActive[index] <- mean(d$Global_active_power)
meanReactive[index] <- mean(d$Global_reactive_power)
meanVoltage[index] <- mean(d$Voltage)
meanIntensity[index] <- mean(d$Global_intensity)
meanMeter1[index] <- mean(d$Sub_metering_1)
meanMeter2[index] <- mean(d$Sub_metering_2)
meanMeter3[index] <-mean(d$Sub_metering_3)
index <-index+1
}
library(lubridate)
library(ggplot2)
#setwd('/home/jl/cmpt318-project')
setwd('E:\\OneDrive - sfu.ca\\CMPT 318 Cyber Security\\cmpt318-project\\HMM data')
dataSet <- read.csv("data_without_NA.txt", header = TRUE, sep = ",", dec = ".")
#dataSet <- read.csv("test1.txt", header = TRUE, sep = ",", dec = ".")
dataSet<- na.omit(dataSet)
# Set the format for the weekdays
weekdays_date = strftime(dataSet$Date, format="%u")
dataSet$weekdays_num = as.integer(weekdays_date)
weekdays = dataSet[dataSet$weekdays_num <= 5,]
weekends = dataSet[dataSet$weekdays_num > 5,]
weekdays_time = factor(weekdays$Time)
weekdays_hours = hms(as.character(weekdays_time))
weekdays$hours = as.integer(hour(weekdays_hours))
weekends_time = factor(weekends$Time)
weekends_hours = hms(as.character(weekends_time))
weekends$hours = as.integer(hour(weekends_hours))
# Allot numbers to specific weekdays
Monday = weekdays[weekdays$weekdays_num == 1,]
Tuesday = weekdays[weekdays$weekdays_num == 2,]
Wednesday = weekdays[weekdays$weekdays_num == 3,]
Thursday = weekdays[weekdays$weekdays_num == 4,]
Friday = weekdays[weekdays$weekdays_num == 5,]
Saturday = weekends[weekends$weekdays_num == 6,]
Sunday = weekends[weekends$weekdays_num == 7,]
# Categorize hours into away hours and work hours for Wednesdays and Saturdays
# Away hours: 10 am to 1 pm
# Home hours: 7 pm to 10 pm
wednesday_awayhours = Wednesday[(Wednesday$hours >=10) & (Wednesday$hours <=13),]
wednesday_homehours = Wednesday[(Wednesday$hours >=19) & (Wednesday$hours <=22),]
saturday_awayhours = Saturday[(Saturday$hours >=10) & (Saturday$hours <=13),]
saturday_homehours = Saturday[(Saturday$hours >=19) & (Saturday$hours <=22),]
data = saturday_awayhours
get_linearPolyFit <- function(data){
time <- factor(data$Time)
count <- 1
index <- 1
meanActive <- 0
meanReactive <- 0
meanVoltage <- 0
meanIntensity <- 0
meanMeter1 <- 0
meanMeter2 <- 0
meanMeter3 <-0
size <- nlevels(time)
while(count <= size){
currentTime <- levels(time)[count]
d<- subset(data, Time == currentTime)
count<- count+1
meanActive[index] <- mean(d$Global_active_power)
meanReactive[index] <- mean(d$Global_reactive_power)
meanVoltage[index] <- mean(d$Voltage)
meanIntensity[index] <- mean(d$Global_intensity)
meanMeter1[index] <- mean(d$Sub_metering_1)
meanMeter2[index] <- mean(d$Sub_metering_2)
meanMeter3[index] <-mean(d$Sub_metering_3)
index <-index+1
}
##
dataMean <- data.frame("Global_active_power" = meanActive, "Time" = levels(awayTime))
fit_linear <- lm(formula=  Global_active_power ~ as.numeric(Time), data = dataMean )
fit_polynomial <- lm(Global_active_power~poly( as.numeric(Time),2,raw=TRUE), data= dataMean )
prediction_linear <- predict(fit_linear, data=dataMean$Global_active_power)
prediction_polynomial <- predict(fit_polynomial, data=dataMean$Global_active_power)
dataMean$prediction_polynomial <- prediction_polynomial
dataMean$prediction_linear <- prediction_linear
p1 <-ggplot(data=dataMean , mapping=aes(x=Time, y=Global_active_power, group = 1)) +
geom_point(color="black") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="red") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Orange") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="Green") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Yellow")
##
dataMean <- data.frame("Global_reactive_power" = meanReactive, "Time" = levels(awayTime))
fit_linear <- lm(formula=  Global_reactive_power ~ as.numeric(Time), data = dataMean )
fit_polynomial <- lm(Global_reactive_power~poly( as.numeric(Time),2,raw=TRUE), data= dataMean )
prediction_linear <- predict(fit_linear, data=dataMean$Global_reactive_power)
prediction_polynomial <- predict(fit_polynomial, data=dataMean$Global_reactive_power)
dataMean$prediction_polynomial <- prediction_polynomial
dataMean$prediction_linear <- prediction_linear
p2 <-ggplot(data=dataMean , mapping=aes(x=Time, y=Global_reactive_power, group = 1)) +
geom_point(color="black") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="red") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Orange") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="Green") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Yellow")
##
dataMean <- data.frame("Voltage" = meanVoltage, "Time" = levels(awayTime))
fit_linear <- lm(formula=  Voltage ~ as.numeric(Time), data = dataMean )
fit_polynomial <- lm(Voltage~poly( as.numeric(Time),2,raw=TRUE), data= dataMean )
prediction_linear <- predict(fit_linear, data=dataMean$Voltage)
prediction_polynomial <- predict(fit_polynomial, data=dataMean$Voltage)
dataMean$prediction_polynomial <- prediction_polynomial
dataMean$prediction_linear <- prediction_linear
p3 <-ggplot(data=dataMean , mapping=aes(x=Time, y=Voltage, group = 1)) +
geom_point(color="black") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="red") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Orange") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="Green") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Yellow")
##
dataMean <- data.frame("Global_intensity" = meanIntensity, "Time" = levels(awayTime))
fit_linear <- lm(formula=  Global_intensity ~ as.numeric(Time), data = dataMean )
fit_polynomial <- lm(Global_intensity~poly( as.numeric(Time),2,raw=TRUE), data= dataMean )
prediction_linear <- predict(fit_linear, data=dataMean$Global_intensity)
prediction_polynomial <- predict(fit_polynomial, data=dataMean$Global_intensity)
dataMean$prediction_polynomial <- prediction_polynomial
dataMean$prediction_linear <- prediction_linear
p4 <-ggplot(data=dataMean , mapping=aes(x=Time, y=Global_intensity, group = 1)) +
geom_point(color="black") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="red") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Orange") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="Green") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Yellow")
##
dataMean <- data.frame("Sub_metering_1" = meanMeter1, "Time" = levels(awayTime))
fit_linear <- lm(formula=  Sub_metering_1 ~ as.numeric(Time), data = dataMean )
fit_polynomial <- lm(Sub_metering_1~poly( as.numeric(Time),2,raw=TRUE), data= dataMean )
prediction_linear <- predict(fit_linear, data=dataMean$Sub_metering_1)
prediction_polynomial <- predict(fit_polynomial, data=dataMean$Sub_metering_1)
dataMean$prediction_polynomial <- prediction_polynomial
dataMean$prediction_linear <- prediction_linear
p5 <-ggplot(data=dataMean , mapping=aes(x=Time, y=Sub_metering_1, group = 1)) +
geom_point(color="black") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="red") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Orange") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="Green") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Yellow")
##
dataMean <- data.frame("Sub_metering_2" = meanMeter2, "Time" = levels(awayTime))
fit_linear <- lm(formula=  Sub_metering_2 ~ as.numeric(Time), data = dataMean )
fit_polynomial <- lm(Sub_metering_2~poly( as.numeric(Time),2,raw=TRUE), data= dataMean )
prediction_linear <- predict(fit_linear, data=dataMean$Sub_metering_2)
prediction_polynomial <- predict(fit_polynomial, data=dataMean$Sub_metering_2)
dataMean$prediction_polynomial <- prediction_polynomial
dataMean$prediction_linear <- prediction_linear
p6 <-ggplot(data=dataMean , mapping=aes(x=Time, y=Sub_metering_2, group = 1)) +
geom_point(color="black") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="red") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Orange") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="Green") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Yellow")
##
dataMean <- data.frame("Sub_metering_3" = meanMeter3, "Time" = levels(awayTime))
fit_linear <- lm(formula=  Sub_metering_3 ~ as.numeric(Time), data = dataMean )
fit_polynomial <- lm(Sub_metering_3~poly( as.numeric(Time),2,raw=TRUE), data= dataMean )
prediction_linear <- predict(fit_linear, data=dataMean$Sub_metering_3)
prediction_polynomial <- predict(fit_polynomial, data=dataMean$Sub_metering_3)
dataMean$prediction_polynomial <- prediction_polynomial
dataMean$prediction_linear <- prediction_linear
p7 <-ggplot(data=dataMean , mapping=aes(x=Time, y=Sub_metering_3, group = 1)) +
geom_point(color="black") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="red") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Orange") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="Green") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Yellow")
returnList = list(p1,p2,p3,p4,p5,p6,p7)
return(returnList)
get_linearPolyFit <- function(data){
time <- factor(data$Time)
count <- 1
index <- 1
meanActive <- 0
meanReactive <- 0
meanVoltage <- 0
meanIntensity <- 0
meanMeter1 <- 0
meanMeter2 <- 0
meanMeter3 <-0
size <- nlevels(time)
while(count <= size){
currentTime <- levels(time)[count]
d<- subset(data, Time == currentTime)
count<- count+1
meanActive[index] <- mean(d$Global_active_power)
meanReactive[index] <- mean(d$Global_reactive_power)
meanVoltage[index] <- mean(d$Voltage)
meanIntensity[index] <- mean(d$Global_intensity)
meanMeter1[index] <- mean(d$Sub_metering_1)
meanMeter2[index] <- mean(d$Sub_metering_2)
meanMeter3[index] <-mean(d$Sub_metering_3)
index <-index+1
}
##
dataMean <- data.frame("Global_active_power" = meanActive, "Time" = levels(awayTime))
fit_linear <- lm(formula=  Global_active_power ~ as.numeric(Time), data = dataMean )
fit_polynomial <- lm(Global_active_power~poly( as.numeric(Time),2,raw=TRUE), data= dataMean )
prediction_linear <- predict(fit_linear, data=dataMean$Global_active_power)
prediction_polynomial <- predict(fit_polynomial, data=dataMean$Global_active_power)
dataMean$prediction_polynomial <- prediction_polynomial
dataMean$prediction_linear <- prediction_linear
p1 <-ggplot(data=dataMean , mapping=aes(x=Time, y=Global_active_power, group = 1)) +
geom_point(color="black") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="red") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Orange") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="Green") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Yellow")
##
dataMean <- data.frame("Global_reactive_power" = meanReactive, "Time" = levels(awayTime))
fit_linear <- lm(formula=  Global_reactive_power ~ as.numeric(Time), data = dataMean )
fit_polynomial <- lm(Global_reactive_power~poly( as.numeric(Time),2,raw=TRUE), data= dataMean )
prediction_linear <- predict(fit_linear, data=dataMean$Global_reactive_power)
prediction_polynomial <- predict(fit_polynomial, data=dataMean$Global_reactive_power)
dataMean$prediction_polynomial <- prediction_polynomial
dataMean$prediction_linear <- prediction_linear
p2 <-ggplot(data=dataMean , mapping=aes(x=Time, y=Global_reactive_power, group = 1)) +
geom_point(color="black") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="red") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Orange") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="Green") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Yellow")
##
dataMean <- data.frame("Voltage" = meanVoltage, "Time" = levels(awayTime))
fit_linear <- lm(formula=  Voltage ~ as.numeric(Time), data = dataMean )
fit_polynomial <- lm(Voltage~poly( as.numeric(Time),2,raw=TRUE), data= dataMean )
prediction_linear <- predict(fit_linear, data=dataMean$Voltage)
prediction_polynomial <- predict(fit_polynomial, data=dataMean$Voltage)
dataMean$prediction_polynomial <- prediction_polynomial
dataMean$prediction_linear <- prediction_linear
p3 <-ggplot(data=dataMean , mapping=aes(x=Time, y=Voltage, group = 1)) +
geom_point(color="black") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="red") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Orange") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="Green") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Yellow")
##
dataMean <- data.frame("Global_intensity" = meanIntensity, "Time" = levels(awayTime))
fit_linear <- lm(formula=  Global_intensity ~ as.numeric(Time), data = dataMean )
fit_polynomial <- lm(Global_intensity~poly( as.numeric(Time),2,raw=TRUE), data= dataMean )
prediction_linear <- predict(fit_linear, data=dataMean$Global_intensity)
prediction_polynomial <- predict(fit_polynomial, data=dataMean$Global_intensity)
dataMean$prediction_polynomial <- prediction_polynomial
dataMean$prediction_linear <- prediction_linear
p4 <-ggplot(data=dataMean , mapping=aes(x=Time, y=Global_intensity, group = 1)) +
geom_point(color="black") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="red") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Orange") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="Green") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Yellow")
##
dataMean <- data.frame("Sub_metering_1" = meanMeter1, "Time" = levels(awayTime))
fit_linear <- lm(formula=  Sub_metering_1 ~ as.numeric(Time), data = dataMean )
fit_polynomial <- lm(Sub_metering_1~poly( as.numeric(Time),2,raw=TRUE), data= dataMean )
prediction_linear <- predict(fit_linear, data=dataMean$Sub_metering_1)
prediction_polynomial <- predict(fit_polynomial, data=dataMean$Sub_metering_1)
dataMean$prediction_polynomial <- prediction_polynomial
dataMean$prediction_linear <- prediction_linear
p5 <-ggplot(data=dataMean , mapping=aes(x=Time, y=Sub_metering_1, group = 1)) +
geom_point(color="black") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="red") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Orange") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="Green") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Yellow")
##
dataMean <- data.frame("Sub_metering_2" = meanMeter2, "Time" = levels(awayTime))
fit_linear <- lm(formula=  Sub_metering_2 ~ as.numeric(Time), data = dataMean )
fit_polynomial <- lm(Sub_metering_2~poly( as.numeric(Time),2,raw=TRUE), data= dataMean )
prediction_linear <- predict(fit_linear, data=dataMean$Sub_metering_2)
prediction_polynomial <- predict(fit_polynomial, data=dataMean$Sub_metering_2)
dataMean$prediction_polynomial <- prediction_polynomial
dataMean$prediction_linear <- prediction_linear
p6 <-ggplot(data=dataMean , mapping=aes(x=Time, y=Sub_metering_2, group = 1)) +
geom_point(color="black") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="red") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Orange") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="Green") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Yellow")
##
dataMean <- data.frame("Sub_metering_3" = meanMeter3, "Time" = levels(awayTime))
fit_linear <- lm(formula=  Sub_metering_3 ~ as.numeric(Time), data = dataMean )
fit_polynomial <- lm(Sub_metering_3~poly( as.numeric(Time),2,raw=TRUE), data= dataMean )
prediction_linear <- predict(fit_linear, data=dataMean$Sub_metering_3)
prediction_polynomial <- predict(fit_polynomial, data=dataMean$Sub_metering_3)
dataMean$prediction_polynomial <- prediction_polynomial
dataMean$prediction_linear <- prediction_linear
p7 <-ggplot(data=dataMean , mapping=aes(x=Time, y=Sub_metering_3, group = 1)) +
geom_point(color="black") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="red") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Orange") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_linear), size=1, color="Green") +
geom_line(data=dataMean , mapping=aes(x=Time, y=prediction_polynomial), size=1, color="Yellow")
returnList = list(p1,p2,p3,p4,p5,p6,p7)
return(returnList)
}
plots = get_linearPolyFit(wednesday_homehours)
print(plots[1])
print(plots[2])
print(plots[3])
print(plots[4])
print(plots[5])
print(plots[6])
print(plots[7])
print(plots[1])
library("lubridate")
library(pracma)
setwd('E:\\OneDrive - sfu.ca\\CMPT 318 Cyber Security\\cmpt318-project')
test1 <- read.csv("test1.txt", header = TRUE, sep = ",", dec = ".")
test2 <- read.csv("test2.txt", header = TRUE, sep = ",", dec = ".")
test3 <- read.csv("test3.txt", header = TRUE, sep = ",", dec = ".")
test4 <- read.csv("test4.txt", header = TRUE, sep = ",", dec = ".")
test5 <- read.csv("test5.txt", header = TRUE, sep = ",", dec = ".")
#pick a random week 2010-03-01 to 2010-03-07
test1 = test1[as.Date(test1$Date, format = '%d/%m/%Y') >= as.Date('2010/03/01')&as.Date(test1$Date, format = '%d/%m/%Y') <= as.Date('2010/03/07'),]
test2 = test2[as.Date(test2$Date, format = '%d/%m/%Y') >= as.Date('2010/03/01')&as.Date(test2$Date, format = '%d/%m/%Y') <= as.Date('2010/03/07'),]
test3 = test3[as.Date(test3$Date, format = '%d/%m/%Y') >= as.Date('2010/03/01')&as.Date(test3$Date, format = '%d/%m/%Y') <= as.Date('2010/03/07'),]
test4 = test4[as.Date(test4$Date, format = '%d/%m/%Y') >= as.Date('2010/03/01')&as.Date(test4$Date, format = '%d/%m/%Y') <= as.Date('2010/03/07'),]
test5 = test5[as.Date(test5$Date, format = '%d/%m/%Y') >= as.Date('2010/03/01')&as.Date(test5$Date, format = '%d/%m/%Y') <= as.Date('2010/03/07'),]
#seperate weekday and weekend
week_days_date = strftime(test1$Date, format="%u")
test1$week_days_num = as.integer(week_days_date)
week_days_date = strftime(test2$Date, format="%u")
test2$week_days_num = as.integer(week_days_date)
week_days_date = strftime(test3$Date, format="%u")
test3$week_days_num = as.integer(week_days_date)
week_days_date = strftime(test4$Date, format="%u")
test4$week_days_num = as.integer(week_days_date)
week_days_date = strftime(test5$Date, format="%u")
test5$week_days_num = as.integer(week_days_date)
#day time
daytime_lower_bound<-8
daytime_upper_bound<-12
#night time
nighttime_lower_bound<-18
nighttime_upper_bound<-24
test1_time = factor(test1$Time)
hours = hms(as.character(test1_time))
test1$Time = as.integer(hour(hours))
test1_weekday_daytime<-test1[test1$Time>=daytime_lower_bound&test1$Time<daytime_upper_bound&test1$week_days_num<=5,]
test1_weekday_nighttime<-test1[test1$Time>=nighttime_lower_bound&test1$Time<nighttime_upper_bound&test1$week_days_num<=5,]
test1_weekend_daytime<-test1[test1$Time>=daytime_lower_bound&test1$Time<daytime_upper_bound&test1$week_days_num>5,]
test1_weekend_nighttime<-test1[test1$Time>=nighttime_lower_bound&test1$Time<nighttime_upper_bound&test1$week_days_num>5,]
print(test1_weekday_daytime)
test2_time = factor(test2$Time)
hours = hms(as.character(test2_time))
test2$Time = as.integer(hour(hours))
test2_weekday_daytime<-test2[test2$Time>=daytime_lower_bound&test2$Time<daytime_upper_bound&test2$week_days_num<=5,]
test2_weekday_nighttime<-test2[test2$Time>=nighttime_lower_bound&test2$Time<nighttime_upper_bound&test2$week_days_num<=5,]
test2_weekend_daytime<-test2[test2$Time>=daytime_lower_bound&test2$Time<daytime_upper_bound&test2$week_days_num>5,]
test2_weekend_nighttime<-test2[test2$Time>=nighttime_lower_bound&test2$Time<nighttime_upper_bound&test2$week_days_num>5,]
test3_time = factor(test3$Time)
hours = hms(as.character(test3_time))
test3$Time = as.integer(hour(hours))
test3_weekday_daytime<-test3[test3$Time>=daytime_lower_bound&test3$Time<daytime_upper_bound&test3$week_days_num<=5,]
test3_weekday_nighttime<-test3[test3$Time>=nighttime_lower_bound&test3$Time<nighttime_upper_bound&test3$week_days_num<=5,]
test3_weekend_daytime<-test3[test3$Time>=daytime_lower_bound&test3$Time<daytime_upper_bound&test3$week_days_num>5,]
test3_weekend_nighttime<-test3[test3$Time>=nighttime_lower_bound&test3$Time<nighttime_upper_bound&test3$week_days_num>5,]
test4_time = factor(test4$Time)
hours = hms(as.character(test4_time))
test4$Time = as.integer(hour(hours))
test4_weekday_daytime<-test4[test4$Time>=daytime_lower_bound&test4$Time<daytime_upper_bound&test4$week_days_num<=5,]
test4_weekday_nighttime<-test4[test4$Time>=nighttime_lower_bound&test4$Time<nighttime_upper_bound&test4$week_days_num<=5,]
test4_weekend_daytime<-test4[test4$Time>=daytime_lower_bound&test4$Time<daytime_upper_bound&test4$week_days_num>5,]
test4_weekend_nighttime<-test4[test4$Time>=nighttime_lower_bound&test4$Time<nighttime_upper_bound&test4$week_days_num>5,]
test5_time = factor(test5$Time)
hours = hms(as.character(test5_time))
test5$Time = as.integer(hour(hours))
test5_weekday_daytime<-test5[test5$Time>=daytime_lower_bound&test5$Time<daytime_upper_bound&test5$week_days_num<=5,]
test5_weekday_nighttime<-test5[test5$Time>=nighttime_lower_bound&test5$Time<nighttime_upper_bound&test5$week_days_num<=5,]
test5_weekend_daytime<-test5[test5$Time>=daytime_lower_bound&test5$Time<daytime_upper_bound&test5$week_days_num>5,]
test5_weekend_nighttime<-test5[test5$Time>=nighttime_lower_bound&test5$Time<nighttime_upper_bound&test5$week_days_num>5,]
#compute moving average
test1_weekday_daytime$mov_avrg=movavg(test1_weekday_daytime$Global_active_power, 10, type="s")
test1_weekday_nighttime$mov_avrg=movavg(test1_weekday_nighttime$Global_active_power, 10, type="s")
test1_weekend_daytime$mov_avrg=movavg(test1_weekend_daytime$Global_active_power, 10, type="s")
test1_weekend_nighttime$mov_avrg=movavg(test1_weekend_nighttime$Global_active_power, 10, type="s")
test2_weekday_daytime$mov_avrg=movavg(test2_weekday_daytime$Global_active_power, 10, type="s")
test2_weekday_nighttime$mov_avrg=movavg(test2_weekday_nighttime$Global_active_power, 10, type="s")
test2_weekend_daytime$mov_avrg=movavg(test2_weekend_daytime$Global_active_power, 10, type="s")
test2_weekend_nighttime$mov_avrg=movavg(test2_weekend_nighttime$Global_active_power, 10, type="s")
test3_weekday_daytime$mov_avrg=movavg(test3_weekday_daytime$Global_active_power, 10, type="s")
test3_weekday_nighttime$mov_avrg=movavg(test3_weekday_nighttime$Global_active_power, 10, type="s")
test3_weekend_daytime$mov_avrg=movavg(test3_weekend_daytime$Global_active_power, 10, type="s")
test3_weekend_nighttime$mov_avrg=movavg(test3_weekend_nighttime$Global_active_power, 10, type="s")
test4_weekday_daytime$mov_avrg=movavg(test4_weekday_daytime$Global_active_power, 10, type="s")
test4_weekday_nighttime$mov_avrg=movavg(test4_weekday_nighttime$Global_active_power, 10, type="s")
test4_weekend_daytime$mov_avrg=movavg(test4_weekend_daytime$Global_active_power, 10, type="s")
test4_weekend_nighttime$mov_avrg=movavg(test4_weekend_nighttime$Global_active_power, 10, type="s")
test5_weekday_daytime$mov_avrg=movavg(test5_weekday_daytime$Global_active_power, 10, type="s")
test5_weekday_nighttime$mov_avrg=movavg(test5_weekday_nighttime$Global_active_power, 10, type="s")
test5_weekend_daytime$mov_avrg=movavg(test5_weekend_daytime$Global_active_power, 10, type="s")
test5_weekend_nighttime$mov_avrg=movavg(test5_weekend_nighttime$Global_active_power, 10, type="s")
#moving average anomalies threshold 1: (max-min)/2 of the dataset
test1_max<-max(test1_weekday_daytime$Global_active_power)
test1_min<-min(test1_weekday_daytime$Global_active_power)
test1_weekday_daytime_anomalies_thres1<-test1_weekday_daytime[abs(test1_weekday_daytime$mov_avrg - test1_weekday_daytime$Global_active_power) >(test1_max-test1_min)/2.5, ]
test1_weekday_nighttime_anomalies_thres1<-test1_weekday_nighttime[test1_weekday_nighttime$mov_avrg - test1_weekday_nighttime$Global_active_power >(test1_max-test1_min)/2.5,]
test1_weekend_daytime_anomalies_thres1<-test1_weekend_daytime[test1_weekend_daytime$mov_avrg - test1_weekend_daytime$Global_active_power >(test1_max-test1_min)/2.5,]
test1_weekend_nighttime_anomalies_thres1<-test1_weekend_nighttime[test1_weekend_nighttime$mov_avrg - test1_weekend_nighttime$Global_active_power >(test1_max-test1_min)/2.5,]
print(test1_weekday_daytime_anomalies_thres1)
test2_max<-max(test2_weekday_daytime$Global_active_power)
test2_min<-min(test2_weekday_daytime$Global_active_power)
test2_weekday_daytime_anomalies_thres1<-test2_weekday_daytime[test2_weekday_daytime$mov_avrg - test2_weekday_daytime$Global_active_power >(test2_max-test2_min)/2.5, ]
test2_weekday_nighttime_anomalies_thres1<-test2_weekday_nighttime[test2_weekday_nighttime$mov_avrg - test2_weekday_nighttime$Global_active_power >(test2_max-test2_min)/2.5,]
test2_weekend_daytime_anomalies_thres1<-test2_weekend_daytime[test2_weekend_daytime$mov_avrg - test2_weekend_daytime$Global_active_power >(test2_max-test2_min)/2.5,]
test2_weekend_nighttime_anomalies_thres1<-test2_weekend_nighttime[test2_weekend_nighttime$mov_avrg - test2_weekend_nighttime$Global_active_power >(test2_max-test2_min)/2.5,]
test3_max<-max(test3_weekday_daytime$Global_active_power)
test3_min<-min(test3_weekday_daytime$Global_active_power)
test3_weekday_daytime_anomalies_thres1<-test3_weekday_daytime[test3_weekday_daytime$mov_avrg - test3_weekday_daytime$Global_active_power >(test3_max-test3_min)/2.5, ]
test3_weekday_nighttime_anomalies_thres1<-test3_weekday_nighttime[test3_weekday_nighttime$mov_avrg - test3_weekday_nighttime$Global_active_power >(test3_max-test3_min)/2.5,]
test3_weekend_daytime_anomalies_thres1<-test3_weekend_daytime[test3_weekend_daytime$mov_avrg - test3_weekend_daytime$Global_active_power >(test3_max-test3_min)/2.5,]
test3_weekend_nighttime_anomalies_thres1<-test3_weekend_nighttime[test3_weekend_nighttime$mov_avrg - test3_weekend_nighttime$Global_active_power >(test3_max-test3_min)/2.5,]
test4_max<-max(test4_weekday_daytime$Global_active_power)
test4_min<-min(test4_weekday_daytime$Global_active_power)
test4_weekday_daytime_anomalies_thres1<-test4_weekday_daytime[test4_weekday_daytime$mov_avrg - test4_weekday_daytime$Global_active_power >(test4_max-test4_min)/2.5, ]
test4_weekday_nighttime_anomalies_thres1<-test4_weekday_nighttime[test4_weekday_nighttime$mov_avrg - test4_weekday_nighttime$Global_active_power >(test4_max-test4_min)/2.5,]
test4_weekend_daytime_anomalies_thres1<-test4_weekend_daytime[test4_weekend_daytime$mov_avrg - test4_weekend_daytime$Global_active_power >(test4_max-test4_min)/2.5,]
test4_weekend_nighttime_anomalies_thres1<-test4_weekend_nighttime[test4_weekend_nighttime$mov_avrg - test4_weekend_nighttime$Global_active_power >(test4_max-test4_min)/2.5,]
test5_max<-max(test5_weekday_daytime$Global_active_power)
test5_min<-min(test5_weekday_daytime$Global_active_power)
test5_weekday_daytime_anomalies_thres1<-test5_weekday_daytime[test5_weekday_daytime$mov_avrg - test5_weekday_daytime$Global_active_power >(test5_max-test5_min)/2.5, ]
test5_weekday_nighttime_anomalies_thres1<-test5_weekday_nighttime[test5_weekday_nighttime$mov_avrg - test5_weekday_nighttime$Global_active_power >(test5_max-test5_min)/2.5,]
test5_weekend_daytime_anomalies_thres1<-test5_weekend_daytime[test5_weekend_daytime$mov_avrg - test5_weekend_daytime$Global_active_power >(test5_max-test5_min)/2.5,]
test5_weekend_nighttime_anomalies_thres1<-test5_weekend_nighttime[test5_weekend_nighttime$mov_avrg - test5_weekend_nighttime$Global_active_power >(test5_max-test5_min)/2.5,]
#moving average anomalies threshold 2: 3*mean of the dataset
test1_mean<-mean(test1_weekday_daytime$Global_active_power)
test1_weekday_daytime_anomalies_thres2<-test1_weekday_daytime[test1_weekday_daytime$mov_avrg - test1_weekday_daytime$Global_active_power >3*test1_mean, ]
test1_weekday_nighttime_anomalies_thres2<-test1_weekday_nighttime[test1_weekday_nighttime$mov_avrg - test1_weekday_nighttime$Global_active_power >3*test1_mean,]
test1_weekend_daytime_anomalies_thres2<-test1_weekend_daytime[test1_weekend_daytime$mov_avrg - test1_weekend_daytime$Global_active_power >3*test1_mean,]
test1_weekend_nighttime_anomalies_thres2<-test1_weekend_nighttime[test1_weekend_nighttime$mov_avrg - test1_weekend_nighttime$Global_active_power >3*test1_mean,]
test2_mean<-mean(test2_weekday_daytime$Global_active_power)
test2_weekday_daytime_anomalies_thres2<-test2_weekday_daytime[test2_weekday_daytime$mov_avrg - test2_weekday_daytime$Global_active_power >3*test2_mean, ]
test2_weekday_nighttime_anomalies_thres2<-test2_weekday_nighttime[test2_weekday_nighttime$mov_avrg - test2_weekday_nighttime$Global_active_power >3*test2_mean,]
test2_weekend_daytime_anomalies_thres2<-test2_weekend_daytime[test2_weekend_daytime$mov_avrg - test2_weekend_daytime$Global_active_power >3*test2_mean,]
test2_weekend_nighttime_anomalies_thres2<-test2_weekend_nighttime[test2_weekend_nighttime$mov_avrg - test2_weekend_nighttime$Global_active_power >3*test2_mean,]
test3_mean<-mean(test3_weekday_daytime$Global_active_power)
test3_weekday_daytime_anomalies_thres2<-test3_weekday_daytime[test3_weekday_daytime$mov_avrg - test3_weekday_daytime$Global_active_power >3*test3_mean, ]
test3_weekday_nighttime_anomalies_thres2<-test3_weekday_nighttime[test3_weekday_nighttime$mov_avrg - test3_weekday_nighttime$Global_active_power >3*test3_mean,]
test3_weekend_daytime_anomalies_thres2<-test3_weekend_daytime[test3_weekend_daytime$mov_avrg - test3_weekend_daytime$Global_active_power >3*test3_mean,]
test3_weekend_nighttime_anomalies_thres2<-test3_weekend_nighttime[test3_weekend_nighttime$mov_avrg - test3_weekend_nighttime$Global_active_power >3*test3_mean,]
test4_mean<-mean(test4_weekday_daytime$Global_active_power)
test4_weekday_daytime_anomalies_thres2<-test4_weekday_daytime[test4_weekday_daytime$mov_avrg - test4_weekday_daytime$Global_active_power >3*test4_mean, ]
test4_weekday_nighttime_anomalies_thres2<-test4_weekday_nighttime[test4_weekday_nighttime$mov_avrg - test4_weekday_nighttime$Global_active_power >3*test4_mean,]
test4_weekend_daytime_anomalies_thres2<-test4_weekend_daytime[test4_weekend_daytime$mov_avrg - test4_weekend_daytime$Global_active_power >3*test4_mean,]
test4_weekend_nighttime_anomalies_thres2<-test4_weekend_nighttime[test4_weekend_nighttime$mov_avrg - test4_weekend_nighttime$Global_active_power >3*test4_mean,]
test5_mean<-mean(test5_weekday_daytime$Global_active_power)
test5_weekday_daytime_anomalies_thres2<-test5_weekday_daytime[test5_weekday_daytime$mov_avrg - test5_weekday_daytime$Global_active_power >3*test5_mean, ]
test5_weekday_nighttime_anomalies_thres2<-test5_weekday_nighttime[test5_weekday_nighttime$mov_avrg - test5_weekday_nighttime$Global_active_power >3*test5_mean,]
test5_weekend_daytime_anomalies_thres2<-test5_weekend_daytime[test5_weekend_daytime$mov_avrg - test5_weekend_daytime$Global_active_power >3*test5_mean,]
test5_weekend_nighttime_anomalies_thres2<-test5_weekend_nighttime[test5_weekend_nighttime$mov_avrg - test5_weekend_nighttime$Global_active_power >3*test5_mean,]
#moving average anomalies threshold 3: 2*median
test1_median<-median(test1_weekday_daytime$Global_active_power)
test1_weekday_daytime_anomalies_thres3<-test1_weekday_daytime[test1_weekday_daytime$mov_avrg - test1_weekday_daytime$Global_active_power >2*test1_median, ]
test1_weekday_nighttime_anomalies_thres3<-test1_weekday_nighttime[test1_weekday_nighttime$mov_avrg - test1_weekday_nighttime$Global_active_power >2*test1_median,]
test1_weekend_daytime_anomalies_thres3<-test1_weekend_daytime[test1_weekend_daytime$mov_avrg - test1_weekend_daytime$Global_active_power >2*test1_median,]
test1_weekend_nighttime_anomalies_thres3<-test1_weekend_nighttime[test1_weekend_nighttime$mov_avrg - test1_weekend_nighttime$Global_active_power >2*test1_median,]
test2_median<-median(test2_weekday_daytime$Global_active_power)
test2_weekday_daytime_anomalies_thres3<-test2_weekday_daytime[test2_weekday_daytime$mov_avrg - test2_weekday_daytime$Global_active_power >2*test2_median, ]
test2_weekday_nighttime_anomalies_thres3<-test2_weekday_nighttime[test2_weekday_nighttime$mov_avrg - test2_weekday_nighttime$Global_active_power >2*test2_median,]
test2_weekend_daytime_anomalies_thres3<-test2_weekend_daytime[test2_weekend_daytime$mov_avrg - test2_weekend_daytime$Global_active_power >2*test2_median,]
test2_weekend_nighttime_anomalies_thres3<-test2_weekend_nighttime[test2_weekend_nighttime$mov_avrg - test2_weekend_nighttime$Global_active_power >2*test2_median,]
test3_median<-median(test3_weekday_daytime$Global_active_power)
test3_weekday_daytime_anomalies_thres3<-test3_weekday_daytime[test3_weekday_daytime$mov_avrg - test3_weekday_daytime$Global_active_power >2*test3_median, ]
test3_weekday_nighttime_anomalies_thres3<-test3_weekday_nighttime[test3_weekday_nighttime$mov_avrg - test3_weekday_nighttime$Global_active_power >2*test3_median,]
test3_weekend_daytime_anomalies_thres3<-test3_weekend_daytime[test3_weekend_daytime$mov_avrg - test3_weekend_daytime$Global_active_power >2*test3_median,]
test3_weekend_nighttime_anomalies_thres3<-test3_weekend_nighttime[test3_weekend_nighttime$mov_avrg - test3_weekend_nighttime$Global_active_power >2*test3_median,]
test4_median<-median(test4_weekday_daytime$Global_active_power)
test4_weekday_daytime_anomalies_thres3<-test4_weekday_daytime[test4_weekday_daytime$mov_avrg - test4_weekday_daytime$Global_active_power >2*test4_median, ]
test4_weekday_nighttime_anomalies_thres3<-test4_weekday_nighttime[test4_weekday_nighttime$mov_avrg - test4_weekday_nighttime$Global_active_power >2*test4_median,]
test4_weekend_daytime_anomalies_thres3<-test4_weekend_daytime[test4_weekend_daytime$mov_avrg - test4_weekend_daytime$Global_active_power >2*test4_median,]
test4_weekend_nighttime_anomalies_thres3<-test4_weekend_nighttime[test4_weekend_nighttime$mov_avrg - test4_weekend_nighttime$Global_active_power >2*test4_median,]
test5_median<-median(test5_weekday_daytime$Global_active_power)
test5_weekday_daytime_anomalies_thres3<-test5_weekday_daytime[test5_weekday_daytime$mov_avrg - test5_weekday_daytime$Global_active_power >2*test5_median, ]
test5_weekday_nighttime_anomalies_thres3<-test5_weekday_nighttime[test5_weekday_nighttime$mov_avrg - test5_weekday_nighttime$Global_active_power >2*test5_median,]
test5_weekend_daytime_anomalies_thres3<-test5_weekend_daytime[test5_weekend_daytime$mov_avrg - test5_weekend_daytime$Global_active_power >2*test5_median,]
test5_weekend_nighttime_anomalies_thres3<-test5_weekend_nighttime[test5_weekend_nighttime$mov_avrg - test5_weekend_nighttime$Global_active_power >2*test5_median,]
